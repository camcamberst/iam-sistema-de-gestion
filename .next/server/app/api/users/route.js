"use strict";(()=>{var o={};o.id=5701,o.ids=[5701],o.modules={30517:o=>{o.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},13685:o=>{o.exports=require("http")},95687:o=>{o.exports=require("https")},85477:o=>{o.exports=require("punycode")},12781:o=>{o.exports=require("stream")},57310:o=>{o.exports=require("url")},59796:o=>{o.exports=require("zlib")},55277:(o,e,r)=>{r.r(e),r.d(e,{headerHooks:()=>E,originalPathname:()=>P,patchFetch:()=>I,requestAsyncStorage:()=>p,routeModule:()=>m,serverHooks:()=>A,staticGenerationAsyncStorage:()=>f,staticGenerationBailout:()=>_});var s={};r.r(s),r.d(s,{DELETE:()=>D,GET:()=>d,POST:()=>c,PUT:()=>g,dynamic:()=>u});var a=r(95419),n=r(69108),i=r(99678),t=r(78070),l=r(66569);let u="force-dynamic";async function d(o){try{console.log("\uD83D\uDC65 [API] Obteniendo usuarios (SOLO DATOS VITALES)");let o=l.R,{data:e,error:r}=await o.from("users").select(`
        id,
        name,
        email,
        role,
        is_active,
        created_at,
        user_groups(
          groups!inner(
            id,
            name
          )
        )
      `).order("created_at",{ascending:!1});if(r)return console.error("‚ùå [API] Error:",r),t.Z.json({success:!1,error:"Error obteniendo usuarios"},{status:500});let s=(e||[]).filter(o=>"modelo"===o.role).map(o=>o.id),a={};if(console.log(`üîç [DEBUG] Usuarios totales: ${(e||[]).length}`),console.log(`üîç [DEBUG] Usuarios modelo: ${s.length}`),console.log(`üîç [DEBUG] IDs de usuarios modelo:`,s),s.length>0){console.log(`üîç [DEBUG] Obteniendo asignaciones para ${s.length} usuarios modelo`);try{let{data:e,error:r}=await o.from("room_assignments_detailed").select("model_id, jornada, room_id, room_name").in("model_id",s);r?(console.error("‚ùå [API] Error obteniendo asignaciones:",r),console.log("\uD83D\uDD0D [DEBUG] Error details:",JSON.stringify(r,null,2))):(console.log(`üîç [DEBUG] Asignaciones raw:`,e),a=(e||[]).reduce((o,e)=>(o[e.model_id]=e,o),{}),console.log(`‚úÖ [API] Asignaciones obtenidas: ${Object.keys(a).length}`))}catch(o){console.error("‚ùå [API] Error en try-catch de asignaciones:",o)}}else console.log("\uD83D\uDD0D [DEBUG] No hay usuarios modelo, saltando consulta de asignaciones");let n=(e||[]).map(o=>{let e=o.user_groups?.map(o=>({id:o.groups.id,name:o.groups.name}))||[],r=a[o.id]||null;return console.log(`üîç [DEBUG] Usuario ${o.name} (${o.email}):`,{user_groups_raw:o.user_groups,formatted_groups:e,groups_count:e.length,active_assignment:r}),{id:o.id,name:o.name,email:o.email,role:o.role,is_active:o.is_active,created_at:o.created_at,groups:e,user_groups:e,jornada:r?.jornada||void 0,room_id:r?.room_id||void 0}});return console.log("‚úÖ [API] Usuarios obtenidos:",n.length),t.Z.json({success:!0,users:n})}catch(o){return console.error("‚ùå [API] Error general:",o),t.Z.json({success:!1,error:"Error interno"},{status:500})}}async function c(o){try{console.log("‚ûï [API] Creando usuario (SOLO DATOS VITALES)");let e=l.R,r=await o.json();console.log("\uD83D\uDD0D [DEBUG] Body completo recibido:",JSON.stringify(r,null,2));let{email:s,password:a,name:n,role:i,group_ids:u,jornada:d,room_id:c}=r;if(console.log("\uD83D\uDD0D [DEBUG] Datos extra\xeddos:",{email:s,name:n,role:i,group_ids:u,jornada:d,room_id:c}),!s||!a||!n||!i)return console.log("‚ùå [DEBUG] Datos faltantes:",{email:!!s,password:!!a,name:!!n,role:!!i}),t.Z.json({success:!1,error:"Datos vitales faltantes"},{status:400});console.log("\uD83D\uDCCB [API] Datos recibidos:",{name:n,email:s,role:i,group_ids:u}),console.log("\uD83D\uDD0D [DEBUG] Creando usuario en Auth con:",{email:s,name:n,role:i});let{data:g,error:D}=await e.auth.admin.createUser({email:s,password:a,email_confirm:!0,user_metadata:{name:n,role:i}});if(D||!g.user)return console.error("‚ùå [API] Error Auth:",D),console.log("\uD83D\uDD0D [DEBUG] Auth error details:",JSON.stringify(D,null,2)),t.Z.json({success:!1,error:"Este email ya est\xe1 registrado. Por favor, usa un email diferente."},{status:400});console.log("‚úÖ [API] Usuario creado en Auth:",g.user.id),console.log("\uD83D\uDD0D [DEBUG] Auth user metadata:",g.user.user_metadata),console.log("\uD83D\uDD0D [DEBUG] Creando perfil en users con:",{id:g.user.id,name:n,email:s,role:i});let{error:m}=await e.from("users").insert({id:g.user.id,name:n,email:s,role:i,is_active:!0});if(m)return console.error("‚ùå [API] Error perfil:",m),console.log("\uD83D\uDD0D [DEBUG] Profile error details:",JSON.stringify(m,null,2)),t.Z.json({success:!1,error:"Error creando perfil"},{status:500});console.log("‚úÖ [API] Perfil creado en users");let p=[];if(u&&u.length>0){console.log("\uD83D\uDCCB [API] Asignando grupos:",u),console.log("\uD83D\uDD0D [DEBUG] Group IDs recibidos:",JSON.stringify(u,null,2));let o=u.map(o=>({user_id:g.user.id,group_id:o,is_manager:!1}));console.log("\uD83D\uDD0D [DEBUG] User groups a insertar:",JSON.stringify(o,null,2));let{data:r,error:s}=await e.from("user_groups").insert(o).select(`
          groups!inner(
            id,
            name
          )
        `);if(s)console.error("‚ùå [API] Error asignando grupos:",s),console.log("\uD83D\uDD0D [DEBUG] Groups error details:",JSON.stringify(s,null,2));else{if(p=r?.map(o=>({id:o.groups.id,name:o.groups.name}))||[],console.log("‚úÖ [API] Grupos asignados:",p.length),console.log("\uD83D\uDD0D [DEBUG] Grupos asignados:",JSON.stringify(p,null,2)),"admin"===i&&p.length>0)for(let o of(console.log("\uD83C\uDFD7Ô∏è [API] Verificando si se debe crear sede autom\xe1ticamente..."),p)){let{data:r,error:s}=await e.from("group_rooms").select("id, room_name").eq("group_id",o.id);if(s){console.error(`‚ùå [API] Error verificando rooms para ${o.name}:`,s);continue}if(r&&0!==r.length)console.log(`‚ÑπÔ∏è [API] ${o.name} ya tiene ${r.length} rooms configurados`);else{console.log(`üèóÔ∏è [API] Creando room por defecto para ${o.name}...`);let{data:r,error:s}=await e.from("group_rooms").insert({group_id:o.id,room_name:"ROOM01",is_active:!0}).select().single();s?console.error(`‚ùå [API] Error creando room para ${o.name}:`,s):console.log(`‚úÖ [API] Room creado autom\xe1ticamente: ${r.room_name} para ${o.name}`)}}console.log("\uD83D\uDD0D [DEBUG] Verificando grupos asignados en BD...");let{data:o,error:s}=await e.from("user_groups").select(`
            groups!inner(
              id,
              name
            )
          `).eq("user_id",g.user.id);if(s)console.error("‚ùå [DEBUG] Error verificando grupos:",s);else{let e=o?.map(o=>({id:o.groups.id,name:o.groups.name}))||[];console.log("\uD83D\uDD0D [DEBUG] Grupos verificados en BD:",JSON.stringify(e,null,2))}}}else console.log("\uD83D\uDD0D [DEBUG] No se proporcionaron grupos o est\xe1n vac\xedos");if("modelo"===i&&d&&c&&u&&u.length>0){console.log("\uD83D\uDCCB [API] Creando asignaci\xf3n de modelo:",{jornada:d,room_id:c,group_id:u[0]}),console.log("\uD83D\uDD0D [API] Validando conflicto de asignaci\xf3n...");let{data:o,error:r}=await e.from("room_assignments").select("id, model_id").eq("room_id",c).eq("jornada",d);if(r)return console.error("‚ùå [API] Error verificando asignaciones existentes:",r),t.Z.json({success:!1,error:"Error verificando disponibilidad"},{status:500});if(o&&o.length>0)return console.log("‚ùå [API] Conflicto detectado:",o),t.Z.json({success:!1,error:"Este room ya est\xe1 ocupado en la jornada seleccionada para este grupo"},{status:400});let{data:s,error:a}=await e.from("room_assignments").select("id, jornada").eq("model_id",g.user.id).eq("room_id",c);if(a)return console.error("‚ùå [API] Error verificando asignaciones de la misma modelo:",a),t.Z.json({success:!1,error:"Error verificando asignaciones de la modelo"},{status:500});if(s&&s.length>0){let o=s.map(o=>o.jornada);return console.log("‚ùå [API] Modelo ya asignada a este room en otras jornadas:",o),t.Z.json({success:!1,error:`Esta modelo ya est\xe1 asignada a este room en la(s) jornada(s): ${o.join(", ")}`},{status:400})}console.log("‚úÖ [API] No hay conflictos, procediendo con la asignaci\xf3n");try{let{error:o}=await e.from("room_assignments").insert({model_id:g.user.id,room_id:c,jornada:d,assigned_by:g.user.id});if(o)console.error("‚ùå [API] Error creando asignaci\xf3n:",o),console.log("‚ö†Ô∏è [WARNING] Asignaci\xf3n no creada, pero usuario s\xed");else{console.log("‚úÖ [API] Asignaci\xf3n de modelo creada exitosamente");let{error:o}=await e.from("jornada_states").update({state:"OCUPADA",model_id:g.user.id,updated_at:new Date().toISOString(),updated_by:g.user.id}).eq("group_id",u[0]).eq("room_id",c).eq("jornada",d);o?console.error("‚ùå [API] Error actualizando estado de jornada:",o):console.log("‚úÖ [API] Estado de jornada actualizado a OCUPADA")}}catch(o){console.error("‚ùå [API] Error general en asignaci\xf3n:",o),console.log("‚ö†Ô∏è [WARNING] Asignaci\xf3n no creada, pero usuario s\xed")}}else"modelo"===i&&console.log("\uD83D\uDD0D [DEBUG] Usuario modelo creado sin asignaci\xf3n (datos faltantes):",{jornada:!!d,room_id:!!c,group_ids:u?.length||0});return console.log("‚úÖ [API] Usuario creado completamente:",g.user.id),t.Z.json({success:!0,user:{id:g.user.id,name:n,email:s,role:i,is_active:!0,groups:p}})}catch(o){return console.error("‚ùå [API] Error general:",o),t.Z.json({success:!1,error:"Error interno"},{status:500})}}async function g(o){try{console.log("‚úèÔ∏è [API] Editando usuario (SOLO DATOS VITALES)");let e=l.R,r=await o.json();console.log("\uD83D\uDD0D [DEBUG] Body completo recibido en PUT:",JSON.stringify(r,null,2));let{id:s,name:a,email:n,password:i,role:u,is_active:d,group_ids:c,jornada:g,room_id:D}=r;if(console.log("\uD83D\uDD0D [DEBUG] Datos extra\xeddos en PUT:",{id:s,name:a,email:n,password:!!i,role:u,is_active:d,group_ids:c,jornada:g,room_id:D}),!s||!a||!n||!u)return console.log("‚ùå [DEBUG] Datos faltantes en PUT:",{id:!!s,name:!!a,email:!!n,role:!!u}),t.Z.json({success:!1,error:"Datos vitales faltantes"},{status:400});console.log("\uD83D\uDD0D [DEBUG] Actualizando usuario con:",{id:s,name:a,email:n,role:u,is_active:d});let{error:m}=await e.from("users").update({name:a,email:n,role:u,is_active:void 0===d||d}).eq("id",s);if(m)return console.error("‚ùå [API] Error actualizando:",m),console.log("\uD83D\uDD0D [DEBUG] Update error details:",JSON.stringify(m,null,2)),t.Z.json({success:!1,error:"Error actualizando usuario"},{status:500});if(console.log("‚úÖ [API] Usuario actualizado exitosamente:",s),i&&i.trim().length>=6){console.log("\uD83D\uDD0D [DEBUG] Actualizando contrase\xf1a para usuario:",s);let{error:o}=await e.auth.admin.updateUserById(s,{password:i.trim()});o?(console.error("‚ùå [API] Error actualizando contrase\xf1a:",o),console.log("‚ö†Ô∏è [WARNING] Contrase\xf1a no actualizada, pero usuario s\xed")):console.log("‚úÖ [API] Contrase\xf1a actualizada exitosamente")}else i&&i.trim().length<6&&console.log("‚ö†Ô∏è [WARNING] Contrase\xf1a muy corta, no se actualiza");if(void 0!==c&&(console.log("\uD83D\uDD0D [DEBUG] Actualizando grupos:",c),console.log("\uD83D\uDD0D [DEBUG] Group IDs recibidos en PUT:",JSON.stringify(c,null,2)),await e.from("user_groups").delete().eq("user_id",s),c.length>0)){let o=c.map(o=>({user_id:s,group_id:o,is_manager:!1}));console.log("\uD83D\uDD0D [DEBUG] User groups a insertar en PUT:",JSON.stringify(o,null,2));let{error:r}=await e.from("user_groups").insert(o);r?(console.error("‚ùå [API] Error actualizando grupos:",r),console.log("\uD83D\uDD0D [DEBUG] Groups error details en PUT:",JSON.stringify(r,null,2))):console.log("‚úÖ [API] Grupos actualizados exitosamente")}if("modelo"===u&&g&&D&&c&&c.length>0){console.log("\uD83D\uDCCB [API] Actualizando asignaci\xf3n de modelo:",{jornada:g,room_id:D,group_id:c[0]}),console.log("\uD83D\uDD0D [API] Validando conflicto de asignaci\xf3n en edici\xf3n...");let{data:o,error:r}=await e.from("room_assignments").select("id, model_id").eq("room_id",D).eq("jornada",g).neq("model_id",s);if(r)return console.error("‚ùå [API] Error verificando asignaciones existentes:",r),t.Z.json({success:!1,error:"Error verificando disponibilidad"},{status:500});if(o&&o.length>0)return console.log("‚ùå [API] Conflicto detectado en edici\xf3n:",o),t.Z.json({success:!1,error:"Este room ya est\xe1 ocupado en la jornada seleccionada para este grupo"},{status:400});let{data:a,error:n}=await e.from("room_assignments").select("id, jornada").eq("model_id",s).eq("room_id",D).neq("jornada",g);if(n)return console.error("‚ùå [API] Error verificando asignaciones de la misma modelo:",n),t.Z.json({success:!1,error:"Error verificando asignaciones de la modelo"},{status:500});if(a&&a.length>0){let o=a.map(o=>o.jornada);return console.log("‚ùå [API] Modelo ya asignada a este room en otras jornadas:",o),t.Z.json({success:!1,error:`Esta modelo ya est\xe1 asignada a este room en la(s) jornada(s): ${o.join(", ")}`},{status:400})}console.log("‚úÖ [API] No hay conflictos, procediendo con la actualizaci\xf3n");try{await e.from("room_assignments").delete().eq("model_id",s);let{error:o}=await e.from("room_assignments").insert({model_id:s,room_id:D,jornada:g,assigned_by:s});if(o)console.error("‚ùå [API] Error actualizando asignaci\xf3n:",o),console.log("‚ö†Ô∏è [WARNING] Asignaci\xf3n no actualizada, pero usuario s\xed");else{console.log("‚úÖ [API] Asignaci\xf3n de modelo actualizada exitosamente");let{error:o}=await e.from("jornada_states").update({state:"OCUPADA",model_id:s,updated_at:new Date().toISOString(),updated_by:s}).eq("group_id",c[0]).eq("room_id",D).eq("jornada",g);o?console.error("‚ùå [API] Error actualizando estado de jornada:",o):console.log("‚úÖ [API] Estado de jornada actualizado a OCUPADA")}}catch(o){console.error("‚ùå [API] Error general en actualizaci\xf3n de asignaci\xf3n:",o),console.log("‚ö†Ô∏è [WARNING] Asignaci\xf3n no actualizada, pero usuario s\xed")}}else"modelo"===u&&(console.log("\uD83D\uDD0D [DEBUG] Eliminando asignaciones existentes para modelo sin jornada/room"),await e.from("room_assignments").delete().eq("model_id",s));return console.log("‚úÖ [API] Usuario actualizado:",s),t.Z.json({success:!0,user:{id:s,name:a,email:n,role:u,is_active:d,groups:c||[]}})}catch(o){return console.error("‚ùå [API] Error general:",o),t.Z.json({success:!1,error:"Error interno"},{status:500})}}async function D(o){try{console.log("\uD83D\uDDD1Ô∏è [API] Eliminando usuario (SOLO DATOS VITALES)");let e=l.R,{searchParams:r}=new URL(o.url),s=r.get("id");if(!s)return t.Z.json({success:!1,error:"ID requerido"},{status:400});await e.from("user_groups").delete().eq("user_id",s);let{error:a}=await e.from("users").delete().eq("id",s);if(a)return console.error("‚ùå [API] Error eliminando:",a),t.Z.json({success:!1,error:"Error eliminando usuario"},{status:500});return await e.auth.admin.deleteUser(s),console.log("‚úÖ [API] Usuario eliminado:",s),t.Z.json({success:!0})}catch(o){return console.error("‚ùå [API] Error general:",o),t.Z.json({success:!1,error:"Error interno"},{status:500})}}let m=new a.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/users/route",pathname:"/api/users",filename:"route",bundlePath:"app/api/users/route"},resolvedPagePath:"C:\\Users\\camca\\OneDrive\\Documentos\\GitHub\\iam-sistema-de-gestion\\app\\api\\users\\route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:p,staticGenerationAsyncStorage:f,serverHooks:A,headerHooks:E,staticGenerationBailout:_}=m,P="/api/users/route";function I(){return(0,i.patchFetch)({serverHooks:A,staticGenerationAsyncStorage:f})}},66569:(o,e,r)=>{r.d(e,{A:()=>t,R:()=>i});var s=r(72964);let a="https://mhernfrkvwigxdubiozm.supabase.co",n=process.env.SUPABASE_SERVICE_ROLE_KEY||"",i=(0,s.createClient)(a,n,{auth:{autoRefreshToken:!1,persistSession:!1}}),t=(0,s.createClient)(a,n,{auth:{autoRefreshToken:!1,persistSession:!1}})}};var e=require("../../../webpack-runtime.js");e.C(o);var r=o=>e(e.s=o),s=e.X(0,[1638,6206,2964],()=>r(55277));module.exports=s})();