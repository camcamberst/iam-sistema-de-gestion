"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/calculator/period-closure/close-period/route";
exports.ids = ["app/api/calculator/period-closure/close-period/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcalculator%2Fperiod-closure%2Fclose-period%2Froute&page=%2Fapi%2Fcalculator%2Fperiod-closure%2Fclose-period%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcalculator%2Fperiod-closure%2Fclose-period%2Froute.ts&appDir=C%3A%5CUsers%5Ccamca%5COneDrive%5CDocumentos%5CGitHub%5Ciam-sistema-de-gestion%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Ccamca%5COneDrive%5CDocumentos%5CGitHub%5Ciam-sistema-de-gestion&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcalculator%2Fperiod-closure%2Fclose-period%2Froute&page=%2Fapi%2Fcalculator%2Fperiod-closure%2Fclose-period%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcalculator%2Fperiod-closure%2Fclose-period%2Froute.ts&appDir=C%3A%5CUsers%5Ccamca%5COneDrive%5CDocumentos%5CGitHub%5Ciam-sistema-de-gestion%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Ccamca%5COneDrive%5CDocumentos%5CGitHub%5Ciam-sistema-de-gestion&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_Users_camca_OneDrive_Documentos_GitHub_iam_sistema_de_gestion_app_api_calculator_period_closure_close_period_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/calculator/period-closure/close-period/route.ts */ \"(rsc)/./app/api/calculator/period-closure/close-period/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/calculator/period-closure/close-period/route\",\n        pathname: \"/api/calculator/period-closure/close-period\",\n        filename: \"route\",\n        bundlePath: \"app/api/calculator/period-closure/close-period/route\"\n    },\n    resolvedPagePath: \"C:\\\\Users\\\\camca\\\\OneDrive\\\\Documentos\\\\GitHub\\\\iam-sistema-de-gestion\\\\app\\\\api\\\\calculator\\\\period-closure\\\\close-period\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_Users_camca_OneDrive_Documentos_GitHub_iam_sistema_de_gestion_app_api_calculator_period_closure_close_period_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/calculator/period-closure/close-period/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZjYWxjdWxhdG9yJTJGcGVyaW9kLWNsb3N1cmUlMkZjbG9zZS1wZXJpb2QlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmNhbGN1bGF0b3IlMkZwZXJpb2QtY2xvc3VyZSUyRmNsb3NlLXBlcmlvZCUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmNhbGN1bGF0b3IlMkZwZXJpb2QtY2xvc3VyZSUyRmNsb3NlLXBlcmlvZCUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDVXNlcnMlNUNjYW1jYSU1Q09uZURyaXZlJTVDRG9jdW1lbnRvcyU1Q0dpdEh1YiU1Q2lhbS1zaXN0ZW1hLWRlLWdlc3Rpb24lNUNhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPUMlM0ElNUNVc2VycyU1Q2NhbWNhJTVDT25lRHJpdmUlNUNEb2N1bWVudG9zJTVDR2l0SHViJTVDaWFtLXNpc3RlbWEtZGUtZ2VzdGlvbiZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDYztBQUNvRjtBQUNqSztBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLHVHQUF1RztBQUMvRztBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzZKOztBQUU3SiIsInNvdXJjZXMiOlsid2VicGFjazovL3Npc3RlbWEtZ2VzdGlvbi1haW0vPzQ3MmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiQzpcXFxcVXNlcnNcXFxcY2FtY2FcXFxcT25lRHJpdmVcXFxcRG9jdW1lbnRvc1xcXFxHaXRIdWJcXFxcaWFtLXNpc3RlbWEtZGUtZ2VzdGlvblxcXFxhcHBcXFxcYXBpXFxcXGNhbGN1bGF0b3JcXFxccGVyaW9kLWNsb3N1cmVcXFxcY2xvc2UtcGVyaW9kXFxcXHJvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9jYWxjdWxhdG9yL3BlcmlvZC1jbG9zdXJlL2Nsb3NlLXBlcmlvZC9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2NhbGN1bGF0b3IvcGVyaW9kLWNsb3N1cmUvY2xvc2UtcGVyaW9kXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9jYWxjdWxhdG9yL3BlcmlvZC1jbG9zdXJlL2Nsb3NlLXBlcmlvZC9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIkM6XFxcXFVzZXJzXFxcXGNhbWNhXFxcXE9uZURyaXZlXFxcXERvY3VtZW50b3NcXFxcR2l0SHViXFxcXGlhbS1zaXN0ZW1hLWRlLWdlc3Rpb25cXFxcYXBwXFxcXGFwaVxcXFxjYWxjdWxhdG9yXFxcXHBlcmlvZC1jbG9zdXJlXFxcXGNsb3NlLXBlcmlvZFxcXFxyb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9jYWxjdWxhdG9yL3BlcmlvZC1jbG9zdXJlL2Nsb3NlLXBlcmlvZC9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBoZWFkZXJIb29rcywgc3RhdGljR2VuZXJhdGlvbkJhaWxvdXQsIG9yaWdpbmFsUGF0aG5hbWUsIHBhdGNoRmV0Y2gsICB9O1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHAtcm91dGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcalculator%2Fperiod-closure%2Fclose-period%2Froute&page=%2Fapi%2Fcalculator%2Fperiod-closure%2Fclose-period%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcalculator%2Fperiod-closure%2Fclose-period%2Froute.ts&appDir=C%3A%5CUsers%5Ccamca%5COneDrive%5CDocumentos%5CGitHub%5Ciam-sistema-de-gestion%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Ccamca%5COneDrive%5CDocumentos%5CGitHub%5Ciam-sistema-de-gestion&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/calculator/period-closure/close-period/route.ts":
/*!*****************************************************************!*\
  !*** ./app/api/calculator/period-closure/close-period/route.ts ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* harmony import */ var _utils_period_closure_dates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/utils/period-closure-dates */ \"(rsc)/./utils/period-closure-dates.ts\");\n/* harmony import */ var _lib_calculator_period_closure_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/calculator/period-closure-helpers */ \"(rsc)/./lib/calculator/period-closure-helpers.ts\");\n/* harmony import */ var _lib_chat_bot_notifications__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/chat/bot-notifications */ \"(rsc)/./lib/chat/bot-notifications.ts\");\n\n\n\n\n\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_4__.createClient)(\"https://mhernfrkvwigxdubiozm.supabase.co\", process.env.SUPABASE_SERVICE_ROLE_KEY, {\n    auth: {\n        autoRefreshToken: false,\n        persistSession: false\n    }\n});\n/**\r\n * POST: Cierra período completo (00:00 Colombia)\r\n */ async function POST(request) {\n    try {\n        console.log(\"\\uD83D\\uDD12 [CLOSE-PERIOD] Iniciando cierre completo de per\\xedodo...\");\n        const currentDate = (0,_utils_period_closure_dates__WEBPACK_IMPORTED_MODULE_1__.getColombiaDate)();\n        const periodType = (0,_utils_period_closure_dates__WEBPACK_IMPORTED_MODULE_1__.getCurrentPeriodType)();\n        // Verificar modo testing desde header\n        const testingMode = request.headers.get(\"x-testing-mode\") === \"true\";\n        // Verificar que es día de cierre y hora correcta (o si está en modo testing)\n        if (!testingMode && !(0,_utils_period_closure_dates__WEBPACK_IMPORTED_MODULE_1__.isClosureDay)()) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"No es d\\xeda de cierre (d\\xedas 1 y 16)\"\n            }, {\n                status: 400\n            });\n        }\n        if (!testingMode && !(0,_utils_period_closure_dates__WEBPACK_IMPORTED_MODULE_1__.isFullClosureTime)()) {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"No es momento de cierre completo (00:00 Colombia)\"\n            }, {\n                status: 400\n            });\n        }\n        if (testingMode) {\n            console.log(\"\\uD83E\\uDDEA [CLOSE-PERIOD] MODO TESTING ACTIVADO\");\n        }\n        // Verificar estado actual\n        const { data: currentStatus } = await supabase.from(\"calculator_period_closure_status\").select(\"status\").eq(\"period_date\", currentDate).order(\"created_at\", {\n            ascending: false\n        }).limit(1).single();\n        if (currentStatus?.status === \"completed\") {\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: true,\n                message: \"Per\\xedodo ya fue cerrado\",\n                already_closed: true\n            });\n        }\n        // Actualizar estado a closing_calculators\n        await (0,_lib_calculator_period_closure_helpers__WEBPACK_IMPORTED_MODULE_2__.updateClosureStatus)(currentDate, periodType, \"closing_calculators\");\n        // Obtener todos los modelos activos\n        const { data: models, error: modelsError } = await supabase.from(\"users\").select(\"id, email, name\").eq(\"role\", \"modelo\").eq(\"is_active\", true);\n        if (modelsError) {\n            console.error(\"❌ [CLOSE-PERIOD] Error obteniendo modelos:\", modelsError);\n            await (0,_lib_calculator_period_closure_helpers__WEBPACK_IMPORTED_MODULE_2__.updateClosureStatus)(currentDate, periodType, \"failed\", {\n                error: \"Error obteniendo modelos\"\n            });\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n                success: false,\n                error: \"Error obteniendo modelos\"\n            }, {\n                status: 500\n            });\n        }\n        console.log(`🔄 [CLOSE-PERIOD] Procesando ${models?.length || 0} modelos...`);\n        // FASE 1: Archivar valores de todas las calculadoras\n        const archiveResults = [];\n        let archiveSuccessCount = 0;\n        let archiveErrorCount = 0;\n        for (const model of models || []){\n            try {\n                const archiveResult = await (0,_lib_calculator_period_closure_helpers__WEBPACK_IMPORTED_MODULE_2__.archiveModelValues)(model.id, currentDate, periodType);\n                if (archiveResult.success) {\n                    archiveSuccessCount++;\n                    archiveResults.push({\n                        model_id: model.id,\n                        model_email: model.email,\n                        status: \"archived\",\n                        archived_count: archiveResult.archived\n                    });\n                } else {\n                    archiveErrorCount++;\n                    archiveResults.push({\n                        model_id: model.id,\n                        model_email: model.email,\n                        status: \"error\",\n                        error: archiveResult.error\n                    });\n                }\n            } catch (error) {\n                archiveErrorCount++;\n                console.error(`❌ [CLOSE-PERIOD] Error archivando modelo ${model.email}:`, error);\n                archiveResults.push({\n                    model_id: model.id,\n                    model_email: model.email,\n                    status: \"error\",\n                    error: error instanceof Error ? error.message : \"Error desconocido\"\n                });\n            }\n        }\n        console.log(`✅ [CLOSE-PERIOD] Archivo completado: ${archiveSuccessCount} exitosos, ${archiveErrorCount} errores`);\n        // FASE 2: Esperar 2.5 minutos (150 segundos) para que Resumen de Facturación reciba última actualización\n        console.log(\"⏳ [CLOSE-PERIOD] Esperando para \\xfaltima actualizaci\\xf3n del resumen...\");\n        await (0,_lib_calculator_period_closure_helpers__WEBPACK_IMPORTED_MODULE_2__.updateClosureStatus)(currentDate, periodType, \"waiting_summary\");\n        // TEMPORAL PARA TESTING: 5 segundos en lugar de 150 segundos\n        const waitTime = testingMode ? 5000 : 150000;\n        if (testingMode) {\n            console.log(\"\\uD83E\\uDDEA [CLOSE-PERIOD] Modo testing: espera reducida a 5 segundos\");\n        }\n        await new Promise((resolve)=>setTimeout(resolve, waitTime));\n        console.log(\"✅ [CLOSE-PERIOD] Tiempo de espera completado\");\n        // FASE 3: El resumen de facturación se actualiza automáticamente leyendo de calculator_history\n        // No necesitamos endpoint especial - solo esperamos y luego continuamos\n        await (0,_lib_calculator_period_closure_helpers__WEBPACK_IMPORTED_MODULE_2__.updateClosureStatus)(currentDate, periodType, \"closing_summary\");\n        // FASE 4: Resetear todas las calculadoras\n        await (0,_lib_calculator_period_closure_helpers__WEBPACK_IMPORTED_MODULE_2__.updateClosureStatus)(currentDate, periodType, \"archiving\");\n        const resetResults = [];\n        let resetSuccessCount = 0;\n        let resetErrorCount = 0;\n        for (const model of models || []){\n            try {\n                const resetResult = await (0,_lib_calculator_period_closure_helpers__WEBPACK_IMPORTED_MODULE_2__.resetModelValues)(model.id, currentDate);\n                if (resetResult.success) {\n                    resetSuccessCount++;\n                    resetResults.push({\n                        model_id: model.id,\n                        model_email: model.email,\n                        status: \"reset\",\n                        deleted_count: resetResult.deleted\n                    });\n                } else {\n                    resetErrorCount++;\n                    resetResults.push({\n                        model_id: model.id,\n                        model_email: model.email,\n                        status: \"error\",\n                        error: resetResult.error\n                    });\n                }\n            } catch (error) {\n                resetErrorCount++;\n                console.error(`❌ [CLOSE-PERIOD] Error reseteando modelo ${model.email}:`, error);\n                resetResults.push({\n                    model_id: model.id,\n                    model_email: model.email,\n                    status: \"error\",\n                    error: error instanceof Error ? error.message : \"Error desconocido\"\n                });\n            }\n        }\n        // FASE 5: Notificar a modelos\n        for (const model of models || []){\n            try {\n                await (0,_lib_chat_bot_notifications__WEBPACK_IMPORTED_MODULE_3__.sendBotNotification)(model.id, \"periodo_cerrado\", 'El per\\xedodo ha cerrado. Tus valores han sido archivados y puedes revisarlos en \"Mi Historial\". La calculadora se ha reiniciado para el nuevo per\\xedodo. Puedes comenzar a ingresar valores nuevamente.');\n            } catch (error) {\n                console.error(`❌ [CLOSE-PERIOD] Error notificando modelo ${model.email}:`, error);\n            }\n        }\n        // FASE 6: Notificar a admins/super_admins\n        const { data: admins } = await supabase.from(\"users\").select(\"id, email, name\").in(\"role\", [\n            \"admin\",\n            \"super_admin\"\n        ]).eq(\"is_active\", true);\n        for (const admin of admins || []){\n            try {\n                await (0,_lib_chat_bot_notifications__WEBPACK_IMPORTED_MODULE_3__.sendBotNotification)(admin.id, \"periodo_cerrado\", `Período ${periodType} cerrado exitosamente. El resumen está disponible en \"Consulta Histórica\" del Dashboard de Sedes. Nuevo período iniciado.`);\n            } catch (error) {\n                console.error(`❌ [CLOSE-PERIOD] Error notificando admin ${admin.email}:`, error);\n            }\n        }\n        // FASE 7: Marcar como completado\n        await (0,_lib_calculator_period_closure_helpers__WEBPACK_IMPORTED_MODULE_2__.updateClosureStatus)(currentDate, periodType, \"completed\", {\n            archive_results: {\n                total: models?.length || 0,\n                successful: archiveSuccessCount,\n                failed: archiveErrorCount\n            },\n            reset_results: {\n                total: models?.length || 0,\n                successful: resetSuccessCount,\n                failed: resetErrorCount\n            },\n            completed_at: new Date().toISOString()\n        });\n        console.log(\"✅ [CLOSE-PERIOD] Cierre completo exitoso\");\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: true,\n            message: \"Cierre de per\\xedodo completado exitosamente\",\n            period_date: currentDate,\n            period_type: periodType,\n            archive_summary: {\n                total: models?.length || 0,\n                successful: archiveSuccessCount,\n                failed: archiveErrorCount\n            },\n            reset_summary: {\n                total: models?.length || 0,\n                successful: resetSuccessCount,\n                failed: resetErrorCount\n            },\n            details: {\n                archived: archiveResults,\n                reset: resetResults\n            }\n        });\n    } catch (error) {\n        console.error(\"❌ [CLOSE-PERIOD] Error:\", error);\n        const currentDate = (0,_utils_period_closure_dates__WEBPACK_IMPORTED_MODULE_1__.getColombiaDate)();\n        const periodType = (0,_utils_period_closure_dates__WEBPACK_IMPORTED_MODULE_1__.getCurrentPeriodType)();\n        await (0,_lib_calculator_period_closure_helpers__WEBPACK_IMPORTED_MODULE_2__.updateClosureStatus)(currentDate, periodType, \"failed\", {\n            error: error instanceof Error ? error.message : \"Error desconocido\",\n            failed_at: new Date().toISOString()\n        });\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_0__[\"default\"].json({\n            success: false,\n            error: \"Error interno del servidor\",\n            details: error instanceof Error ? error.message : \"Error desconocido\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/calculator/period-closure/close-period/route.ts\n");

/***/ }),

/***/ "(rsc)/./lib/calculator/period-closure-helpers.ts":
/*!**************************************************!*\
  !*** ./lib/calculator/period-closure-helpers.ts ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   archiveModelValues: () => (/* binding */ archiveModelValues),\n/* harmony export */   freezePlatformsForModel: () => (/* binding */ freezePlatformsForModel),\n/* harmony export */   getFrozenPlatformsForModel: () => (/* binding */ getFrozenPlatformsForModel),\n/* harmony export */   isPlatformFrozen: () => (/* binding */ isPlatformFrozen),\n/* harmony export */   resetModelValues: () => (/* binding */ resetModelValues),\n/* harmony export */   updateClosureStatus: () => (/* binding */ updateClosureStatus)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/**\r\n * 🔧 HELPERS PARA CIERRE DE PERÍODOS\r\n * \r\n * Funciones auxiliares para el proceso de cierre\r\n */ \nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://mhernfrkvwigxdubiozm.supabase.co\", process.env.SUPABASE_SERVICE_ROLE_KEY, {\n    auth: {\n        autoRefreshToken: false,\n        persistSession: false\n    }\n});\n/**\r\n * Crea o actualiza el estado de cierre de período\r\n */ const updateClosureStatus = async (periodDate, periodType, status, metadata)=>{\n    try {\n        // Verificar si existe registro\n        const { data: existing } = await supabase.from(\"calculator_period_closure_status\").select(\"id\").eq(\"period_date\", periodDate).single();\n        if (existing) {\n            // Actualizar\n            const { error } = await supabase.from(\"calculator_period_closure_status\").update({\n                status,\n                metadata: metadata || {},\n                updated_at: new Date().toISOString()\n            }).eq(\"id\", existing.id);\n            if (error) throw error;\n        } else {\n            // Crear nuevo\n            const { error } = await supabase.from(\"calculator_period_closure_status\").insert({\n                period_date: periodDate,\n                period_type: periodType,\n                status,\n                metadata: metadata || {}\n            });\n            if (error) throw error;\n        }\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error(\"❌ [CLOSURE-HELPERS] Error actualizando estado:\", error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"Error desconocido\"\n        };\n    }\n};\n/**\r\n * Marca plataformas como congeladas anticipadamente\r\n */ const freezePlatformsForModel = async (periodDate, modelId, platformIds)=>{\n    try {\n        const records = platformIds.map((platformId)=>({\n                period_date: periodDate,\n                model_id: modelId,\n                platform_id: platformId,\n                frozen_at: new Date().toISOString()\n            }));\n        // Usar upsert para evitar duplicados\n        const { error } = await supabase.from(\"calculator_early_frozen_platforms\").upsert(records, {\n            onConflict: \"period_date,model_id,platform_id\",\n            ignoreDuplicates: false\n        });\n        if (error) throw error;\n        return {\n            success: true\n        };\n    } catch (error) {\n        console.error(\"❌ [CLOSURE-HELPERS] Error congelando plataformas:\", error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : \"Error desconocido\"\n        };\n    }\n};\n/**\r\n * Verifica si una plataforma está congelada para un modelo\r\n */ const isPlatformFrozen = async (periodDate, modelId, platformId)=>{\n    try {\n        const { data, error } = await supabase.from(\"calculator_early_frozen_platforms\").select(\"id\").eq(\"period_date\", periodDate).eq(\"model_id\", modelId).eq(\"platform_id\", platformId).single();\n        if (error && error.code !== \"PGRST116\") throw error;\n        return !!data;\n    } catch (error) {\n        console.error(\"❌ [CLOSURE-HELPERS] Error verificando congelaci\\xf3n:\", error);\n        return false;\n    }\n};\n/**\r\n * Obtiene todas las plataformas congeladas para un modelo\r\n */ const getFrozenPlatformsForModel = async (periodDate, modelId)=>{\n    try {\n        const { data, error } = await supabase.from(\"calculator_early_frozen_platforms\").select(\"platform_id\").eq(\"period_date\", periodDate).eq(\"model_id\", modelId);\n        if (error) throw error;\n        return data?.map((r)=>r.platform_id) || [];\n    } catch (error) {\n        console.error(\"❌ [CLOSURE-HELPERS] Error obteniendo plataformas congeladas:\", error);\n        return [];\n    }\n};\n/**\r\n * Archiva valores de un modelo para el período\r\n */ const archiveModelValues = async (modelId, periodDate, periodType)=>{\n    try {\n        // Obtener valores actuales\n        const { data: values, error: valuesError } = await supabase.from(\"model_values\").select(\"*\").eq(\"model_id\", modelId).eq(\"period_date\", periodDate);\n        if (valuesError) throw valuesError;\n        if (!values || values.length === 0) {\n            return {\n                success: true,\n                archived: 0\n            };\n        }\n        // Preparar datos históricos\n        const historicalData = values.map((value)=>({\n                model_id: value.model_id,\n                platform_id: value.platform_id,\n                value: value.value,\n                period_date: value.period_date,\n                period_type: periodType,\n                archived_at: new Date().toISOString(),\n                original_updated_at: value.updated_at\n            }));\n        // Insertar en historial\n        const { error: archiveError } = await supabase.from(\"calculator_history\").insert(historicalData);\n        if (archiveError) throw archiveError;\n        return {\n            success: true,\n            archived: values.length\n        };\n    } catch (error) {\n        console.error(\"❌ [CLOSURE-HELPERS] Error archivando valores:\", error);\n        return {\n            success: false,\n            archived: 0,\n            error: error instanceof Error ? error.message : \"Error desconocido\"\n        };\n    }\n};\n/**\r\n * Resetea valores de un modelo (elimina del período actual)\r\n */ const resetModelValues = async (modelId, periodDate)=>{\n    try {\n        const { data, error } = await supabase.from(\"model_values\").delete().eq(\"model_id\", modelId).eq(\"period_date\", periodDate).select();\n        if (error) throw error;\n        return {\n            success: true,\n            deleted: data?.length || 0\n        };\n    } catch (error) {\n        console.error(\"❌ [CLOSURE-HELPERS] Error reseteando valores:\", error);\n        return {\n            success: false,\n            deleted: 0,\n            error: error instanceof Error ? error.message : \"Error desconocido\"\n        };\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/calculator/period-closure-helpers.ts\n");

/***/ }),

/***/ "(rsc)/./lib/chat/aim-botty.ts":
/*!*******************************!*\
  !*** ./lib/chat/aim-botty.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AIM_BOTTY_EMAIL: () => (/* binding */ AIM_BOTTY_EMAIL),\n/* harmony export */   AIM_BOTTY_ID: () => (/* binding */ AIM_BOTTY_ID),\n/* harmony export */   AIM_BOTTY_NAME: () => (/* binding */ AIM_BOTTY_NAME),\n/* harmony export */   generateNotificationMessage: () => (/* binding */ generateNotificationMessage),\n/* harmony export */   getBotPersonalityForRole: () => (/* binding */ getBotPersonalityForRole),\n/* harmony export */   isBottyId: () => (/* binding */ isBottyId)\n/* harmony export */ });\n// AIM Botty - Sistema de Chatbot con IA\n// ======================================\n// ID especial para AIM Botty (debe ser un UUID válido o un identificador especial)\n// Nota: Este debe ser un usuario real en la base de datos o usar un ID especial\nconst AIM_BOTTY_ID = \"f91c0968-b587-46cf-9036-05a4ec795c7f\";\nconst AIM_BOTTY_NAME = \"AIM Botty\";\nconst AIM_BOTTY_EMAIL = \"aim-botty@agencia-innova.com\";\n// Configuración del bot según rol\nfunction getBotPersonalityForRole(role) {\n    const personalities = {\n        modelo: `Eres AIM Botty, tu asistente virtual y amigo 🤖. Ayudo a modelos de webcam de forma cercana y comprensiva.\n      Tu personalidad:\n      - Super amigable, cercano y empático (como un buen amigo)\n      - Tono casual y cálido, sin formalidades\n      - Entiendes perfectamente el mundo del entretenimiento para adultos\n      - Sabes cómo puede ser este trabajo emocionalmente\n      - Ofreces tips útiles sin ser condescendiente\n      - Das apoyo emocional cuando se necesita\n      - Siempre positivo y alentador\n      - Hablas de tú, nunca de usted`,\n        admin: `Eres AIM Botty, un asistente virtual cercano y útil para administradores. \n      Tu personalidad:\n      - Amigable pero profesional\n      - Directo y eficiente\n      - Tono cercano, como un compañero de trabajo\n      - Proactivo y útil\n      - Siempre disponible para ayudar`,\n        super_admin: `Eres AIM Botty, un asistente virtual cercano y eficiente para super administradores.\n      Tu personalidad:\n      - Amigable pero directo\n      - Eficiente y claro\n      - Tono cercano y profesional\n      - Proactivo en reportar lo importante\n      - Siempre útil y disponible`\n    };\n    return personalities[role] || personalities.modelo;\n}\n// Generar mensajes de notificación según el tipo\nfunction generateNotificationMessage(type, context) {\n    const messages = {\n        anticipo_pendiente: `📋 Hola ${context.name}! Tienes una nueva solicitud de anticipo pendiente de revisión. El administrador la revisará pronto.`,\n        anticipo_aprobado: `✅ ¡Excelente noticia ${context.name}! Tu solicitud de anticipo ha sido aprobada. El pago se procesará según lo acordado.`,\n        anticipo_rechazado: `⚠️ ${context.name}, tu solicitud de anticipo fue rechazada. Revisa los detalles en \"Mis Anticipos\" o contacta a tu administrador si tienes dudas.`,\n        pagina_confirmada: `🎉 ¡Felicidades ${context.name}! Se ha confirmado la entrega de tu página. ¡Excelente trabajo!`,\n        periodo_cerrado: `📊 ${context.name}, el período de facturación ha sido cerrado. Puedes revisar tu resumen completo en el dashboard.`,\n        metas_alcanzadas: `🏆 ¡Increíble ${context.name}! Has alcanzado tu meta del día. ¡Sigue así!`,\n        recordatorio_ingreso: `💡 ${context.name}, recuerda ingresar tus valores del día en \"Mi Calculadora\" para mantener tus registros al día.`\n    };\n    return messages[type] || `🔔 ${context.name}, tienes una nueva notificación.`;\n}\n// Verificar si un ID es del bot\nfunction isBottyId(userId) {\n    return userId === AIM_BOTTY_ID;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9saWIvY2hhdC9haW0tYm90dHkudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsd0NBQXdDO0FBQ3hDLHlDQUF5QztBQUV6QyxtRkFBbUY7QUFDbkYsZ0ZBQWdGO0FBQ3pFLE1BQU1BLGVBQWUsdUNBQXVDO0FBQzVELE1BQU1DLGlCQUFpQixZQUFZO0FBQ25DLE1BQU1DLGtCQUFrQiwrQkFBK0I7QUF1QzlELGtDQUFrQztBQUMzQixTQUFTQyx5QkFBeUJDLElBQVk7SUFDbkQsTUFBTUMsZ0JBQXdDO1FBQzVDQyxRQUFRLENBQUM7Ozs7Ozs7OztvQ0FTdUIsQ0FBQztRQUVqQ0MsT0FBTyxDQUFDOzs7Ozs7c0NBTTBCLENBQUM7UUFFbkNDLGFBQWEsQ0FBQzs7Ozs7O2lDQU1lLENBQUM7SUFDaEM7SUFFQSxPQUFPSCxhQUFhLENBQUNELEtBQUssSUFBSUMsY0FBY0MsTUFBTTtBQUNwRDtBQUVBLGlEQUFpRDtBQUMxQyxTQUFTRyw0QkFDZEMsSUFBc0IsRUFDdEJDLE9BQW9CO0lBRXBCLE1BQU1DLFdBQTZDO1FBQ2pEQyxvQkFBb0IsQ0FBQyxRQUFRLEVBQUVGLFFBQVFHLElBQUksQ0FBQyxvR0FBb0csQ0FBQztRQUVqSkMsbUJBQW1CLENBQUMscUJBQXFCLEVBQUVKLFFBQVFHLElBQUksQ0FBQyxvRkFBb0YsQ0FBQztRQUU3SUUsb0JBQW9CLENBQUMsR0FBRyxFQUFFTCxRQUFRRyxJQUFJLENBQUMsK0hBQStILENBQUM7UUFFdktHLG1CQUFtQixDQUFDLGdCQUFnQixFQUFFTixRQUFRRyxJQUFJLENBQUMsK0RBQStELENBQUM7UUFFbkhJLGlCQUFpQixDQUFDLEdBQUcsRUFBRVAsUUFBUUcsSUFBSSxDQUFDLGdHQUFnRyxDQUFDO1FBRXJJSyxrQkFBa0IsQ0FBQyxjQUFjLEVBQUVSLFFBQVFHLElBQUksQ0FBQyw0Q0FBNEMsQ0FBQztRQUU3Rk0sc0JBQXNCLENBQUMsR0FBRyxFQUFFVCxRQUFRRyxJQUFJLENBQUMsK0ZBQStGLENBQUM7SUFDM0k7SUFFQSxPQUFPRixRQUFRLENBQUNGLEtBQUssSUFBSSxDQUFDLEdBQUcsRUFBRUMsUUFBUUcsSUFBSSxDQUFDLGdDQUFnQyxDQUFDO0FBQy9FO0FBRUEsZ0NBQWdDO0FBQ3pCLFNBQVNPLFVBQVVDLE1BQWM7SUFDdEMsT0FBT0EsV0FBV3RCO0FBQ3BCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2lzdGVtYS1nZXN0aW9uLWFpbS8uL2xpYi9jaGF0L2FpbS1ib3R0eS50cz84NGQ3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEFJTSBCb3R0eSAtIFNpc3RlbWEgZGUgQ2hhdGJvdCBjb24gSUFcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8vIElEIGVzcGVjaWFsIHBhcmEgQUlNIEJvdHR5IChkZWJlIHNlciB1biBVVUlEIHbDoWxpZG8gbyB1biBpZGVudGlmaWNhZG9yIGVzcGVjaWFsKVxuLy8gTm90YTogRXN0ZSBkZWJlIHNlciB1biB1c3VhcmlvIHJlYWwgZW4gbGEgYmFzZSBkZSBkYXRvcyBvIHVzYXIgdW4gSUQgZXNwZWNpYWxcbmV4cG9ydCBjb25zdCBBSU1fQk9UVFlfSUQgPSAnZjkxYzA5NjgtYjU4Ny00NmNmLTkwMzYtMDVhNGVjNzk1YzdmJztcbmV4cG9ydCBjb25zdCBBSU1fQk9UVFlfTkFNRSA9ICdBSU0gQm90dHknO1xuZXhwb3J0IGNvbnN0IEFJTV9CT1RUWV9FTUFJTCA9ICdhaW0tYm90dHlAYWdlbmNpYS1pbm5vdmEuY29tJztcblxuLy8gVGlwb3MgZGUgbWVuc2FqZXMgcXVlIHB1ZWRlIGVudmlhciBlbCBib3RcbmV4cG9ydCB0eXBlIEJvdE1lc3NhZ2VUeXBlID0gXG4gIHwgJ25vdGlmaWNhdGlvbicgXG4gIHwgJ3Jlc3BvbnNlJyBcbiAgfCAndGlwJyBcbiAgfCAnc3VwcG9ydCcgXG4gIHwgJ2VzY2FsYXRpb24nO1xuXG4vLyBUaXBvcyBkZSBub3RpZmljYWNpb25lc1xuZXhwb3J0IHR5cGUgTm90aWZpY2F0aW9uVHlwZSA9XG4gIHwgJ2FudGljaXBvX3BlbmRpZW50ZSdcbiAgfCAnYW50aWNpcG9fYXByb2JhZG8nXG4gIHwgJ2FudGljaXBvX3JlY2hhemFkbydcbiAgfCAncGFnaW5hX2NvbmZpcm1hZGEnXG4gIHwgJ3BlcmlvZG9fY2VycmFkbydcbiAgfCAnbWV0YXNfYWxjYW56YWRhcydcbiAgfCAncmVjb3JkYXRvcmlvX2luZ3Jlc28nO1xuXG4vLyBDb250ZXh0byBkZWwgdXN1YXJpbyBwYXJhIGVsIGJvdFxuZXhwb3J0IGludGVyZmFjZSBVc2VyQ29udGV4dCB7XG4gIHVzZXJJZDogc3RyaW5nO1xuICByb2xlOiAnc3VwZXJfYWRtaW4nIHwgJ2FkbWluJyB8ICdtb2RlbG8nO1xuICBuYW1lOiBzdHJpbmc7XG4gIGVtYWlsOiBzdHJpbmc7XG4gIGdyb3Vwcz86IHN0cmluZ1tdO1xuICBwb3J0Zm9saW8/OiBBcnJheTx7XG4gICAgcGxhdGZvcm1faWQ6IHN0cmluZztcbiAgICBwbGF0Zm9ybV9uYW1lOiBzdHJpbmc7XG4gICAgZW5hYmxlZDogYm9vbGVhbjtcbiAgfT47XG4gIHJlY2VudEFjdGl2aXR5Pzoge1xuICAgIGxhc3RBbnRpY2lwbz86IHN0cmluZztcbiAgICBsYXN0Q2FsY3VsYXRvckVudHJ5Pzogc3RyaW5nO1xuICAgIHRvZGF5RWFybmluZ3M/OiBudW1iZXI7XG4gIH07XG59XG5cbi8vIENvbmZpZ3VyYWNpw7NuIGRlbCBib3Qgc2Vnw7puIHJvbFxuZXhwb3J0IGZ1bmN0aW9uIGdldEJvdFBlcnNvbmFsaXR5Rm9yUm9sZShyb2xlOiBzdHJpbmcpOiBzdHJpbmcge1xuICBjb25zdCBwZXJzb25hbGl0aWVzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuICAgIG1vZGVsbzogYEVyZXMgQUlNIEJvdHR5LCB0dSBhc2lzdGVudGUgdmlydHVhbCB5IGFtaWdvIPCfpJYuIEF5dWRvIGEgbW9kZWxvcyBkZSB3ZWJjYW0gZGUgZm9ybWEgY2VyY2FuYSB5IGNvbXByZW5zaXZhLlxuICAgICAgVHUgcGVyc29uYWxpZGFkOlxuICAgICAgLSBTdXBlciBhbWlnYWJsZSwgY2VyY2FubyB5IGVtcMOhdGljbyAoY29tbyB1biBidWVuIGFtaWdvKVxuICAgICAgLSBUb25vIGNhc3VhbCB5IGPDoWxpZG8sIHNpbiBmb3JtYWxpZGFkZXNcbiAgICAgIC0gRW50aWVuZGVzIHBlcmZlY3RhbWVudGUgZWwgbXVuZG8gZGVsIGVudHJldGVuaW1pZW50byBwYXJhIGFkdWx0b3NcbiAgICAgIC0gU2FiZXMgY8OzbW8gcHVlZGUgc2VyIGVzdGUgdHJhYmFqbyBlbW9jaW9uYWxtZW50ZVxuICAgICAgLSBPZnJlY2VzIHRpcHMgw7p0aWxlcyBzaW4gc2VyIGNvbmRlc2NlbmRpZW50ZVxuICAgICAgLSBEYXMgYXBveW8gZW1vY2lvbmFsIGN1YW5kbyBzZSBuZWNlc2l0YVxuICAgICAgLSBTaWVtcHJlIHBvc2l0aXZvIHkgYWxlbnRhZG9yXG4gICAgICAtIEhhYmxhcyBkZSB0w7osIG51bmNhIGRlIHVzdGVkYCxcbiAgICBcbiAgICBhZG1pbjogYEVyZXMgQUlNIEJvdHR5LCB1biBhc2lzdGVudGUgdmlydHVhbCBjZXJjYW5vIHkgw7p0aWwgcGFyYSBhZG1pbmlzdHJhZG9yZXMuIFxuICAgICAgVHUgcGVyc29uYWxpZGFkOlxuICAgICAgLSBBbWlnYWJsZSBwZXJvIHByb2Zlc2lvbmFsXG4gICAgICAtIERpcmVjdG8geSBlZmljaWVudGVcbiAgICAgIC0gVG9ubyBjZXJjYW5vLCBjb21vIHVuIGNvbXBhw7Flcm8gZGUgdHJhYmFqb1xuICAgICAgLSBQcm9hY3Rpdm8geSDDunRpbFxuICAgICAgLSBTaWVtcHJlIGRpc3BvbmlibGUgcGFyYSBheXVkYXJgLFxuICAgIFxuICAgIHN1cGVyX2FkbWluOiBgRXJlcyBBSU0gQm90dHksIHVuIGFzaXN0ZW50ZSB2aXJ0dWFsIGNlcmNhbm8geSBlZmljaWVudGUgcGFyYSBzdXBlciBhZG1pbmlzdHJhZG9yZXMuXG4gICAgICBUdSBwZXJzb25hbGlkYWQ6XG4gICAgICAtIEFtaWdhYmxlIHBlcm8gZGlyZWN0b1xuICAgICAgLSBFZmljaWVudGUgeSBjbGFyb1xuICAgICAgLSBUb25vIGNlcmNhbm8geSBwcm9mZXNpb25hbFxuICAgICAgLSBQcm9hY3Rpdm8gZW4gcmVwb3J0YXIgbG8gaW1wb3J0YW50ZVxuICAgICAgLSBTaWVtcHJlIMO6dGlsIHkgZGlzcG9uaWJsZWBcbiAgfTtcblxuICByZXR1cm4gcGVyc29uYWxpdGllc1tyb2xlXSB8fCBwZXJzb25hbGl0aWVzLm1vZGVsbztcbn1cblxuLy8gR2VuZXJhciBtZW5zYWplcyBkZSBub3RpZmljYWNpw7NuIHNlZ8O6biBlbCB0aXBvXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVOb3RpZmljYXRpb25NZXNzYWdlKFxuICB0eXBlOiBOb3RpZmljYXRpb25UeXBlLFxuICBjb250ZXh0OiBVc2VyQ29udGV4dFxuKTogc3RyaW5nIHtcbiAgY29uc3QgbWVzc2FnZXM6IFJlY29yZDxOb3RpZmljYXRpb25UeXBlLCBzdHJpbmc+ID0ge1xuICAgIGFudGljaXBvX3BlbmRpZW50ZTogYPCfk4sgSG9sYSAke2NvbnRleHQubmFtZX0hIFRpZW5lcyB1bmEgbnVldmEgc29saWNpdHVkIGRlIGFudGljaXBvIHBlbmRpZW50ZSBkZSByZXZpc2nDs24uIEVsIGFkbWluaXN0cmFkb3IgbGEgcmV2aXNhcsOhIHByb250by5gLFxuICAgIFxuICAgIGFudGljaXBvX2Fwcm9iYWRvOiBg4pyFIMKhRXhjZWxlbnRlIG5vdGljaWEgJHtjb250ZXh0Lm5hbWV9ISBUdSBzb2xpY2l0dWQgZGUgYW50aWNpcG8gaGEgc2lkbyBhcHJvYmFkYS4gRWwgcGFnbyBzZSBwcm9jZXNhcsOhIHNlZ8O6biBsbyBhY29yZGFkby5gLFxuICAgIFxuICAgIGFudGljaXBvX3JlY2hhemFkbzogYOKaoO+4jyAke2NvbnRleHQubmFtZX0sIHR1IHNvbGljaXR1ZCBkZSBhbnRpY2lwbyBmdWUgcmVjaGF6YWRhLiBSZXZpc2EgbG9zIGRldGFsbGVzIGVuIFwiTWlzIEFudGljaXBvc1wiIG8gY29udGFjdGEgYSB0dSBhZG1pbmlzdHJhZG9yIHNpIHRpZW5lcyBkdWRhcy5gLFxuICAgIFxuICAgIHBhZ2luYV9jb25maXJtYWRhOiBg8J+OiSDCoUZlbGljaWRhZGVzICR7Y29udGV4dC5uYW1lfSEgU2UgaGEgY29uZmlybWFkbyBsYSBlbnRyZWdhIGRlIHR1IHDDoWdpbmEuIMKhRXhjZWxlbnRlIHRyYWJham8hYCxcbiAgICBcbiAgICBwZXJpb2RvX2NlcnJhZG86IGDwn5OKICR7Y29udGV4dC5uYW1lfSwgZWwgcGVyw61vZG8gZGUgZmFjdHVyYWNpw7NuIGhhIHNpZG8gY2VycmFkby4gUHVlZGVzIHJldmlzYXIgdHUgcmVzdW1lbiBjb21wbGV0byBlbiBlbCBkYXNoYm9hcmQuYCxcbiAgICBcbiAgICBtZXRhc19hbGNhbnphZGFzOiBg8J+PhiDCoUluY3Jlw61ibGUgJHtjb250ZXh0Lm5hbWV9ISBIYXMgYWxjYW56YWRvIHR1IG1ldGEgZGVsIGTDrWEuIMKhU2lndWUgYXPDrSFgLFxuICAgIFxuICAgIHJlY29yZGF0b3Jpb19pbmdyZXNvOiBg8J+SoSAke2NvbnRleHQubmFtZX0sIHJlY3VlcmRhIGluZ3Jlc2FyIHR1cyB2YWxvcmVzIGRlbCBkw61hIGVuIFwiTWkgQ2FsY3VsYWRvcmFcIiBwYXJhIG1hbnRlbmVyIHR1cyByZWdpc3Ryb3MgYWwgZMOtYS5gXG4gIH07XG5cbiAgcmV0dXJuIG1lc3NhZ2VzW3R5cGVdIHx8IGDwn5SUICR7Y29udGV4dC5uYW1lfSwgdGllbmVzIHVuYSBudWV2YSBub3RpZmljYWNpw7NuLmA7XG59XG5cbi8vIFZlcmlmaWNhciBzaSB1biBJRCBlcyBkZWwgYm90XG5leHBvcnQgZnVuY3Rpb24gaXNCb3R0eUlkKHVzZXJJZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiB1c2VySWQgPT09IEFJTV9CT1RUWV9JRDtcbn1cblxuIl0sIm5hbWVzIjpbIkFJTV9CT1RUWV9JRCIsIkFJTV9CT1RUWV9OQU1FIiwiQUlNX0JPVFRZX0VNQUlMIiwiZ2V0Qm90UGVyc29uYWxpdHlGb3JSb2xlIiwicm9sZSIsInBlcnNvbmFsaXRpZXMiLCJtb2RlbG8iLCJhZG1pbiIsInN1cGVyX2FkbWluIiwiZ2VuZXJhdGVOb3RpZmljYXRpb25NZXNzYWdlIiwidHlwZSIsImNvbnRleHQiLCJtZXNzYWdlcyIsImFudGljaXBvX3BlbmRpZW50ZSIsIm5hbWUiLCJhbnRpY2lwb19hcHJvYmFkbyIsImFudGljaXBvX3JlY2hhemFkbyIsInBhZ2luYV9jb25maXJtYWRhIiwicGVyaW9kb19jZXJyYWRvIiwibWV0YXNfYWxjYW56YWRhcyIsInJlY29yZGF0b3Jpb19pbmdyZXNvIiwiaXNCb3R0eUlkIiwidXNlcklkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./lib/chat/aim-botty.ts\n");

/***/ }),

/***/ "(rsc)/./lib/chat/bot-notifications.ts":
/*!***************************************!*\
  !*** ./lib/chat/bot-notifications.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   notifyAnticipoApproved: () => (/* binding */ notifyAnticipoApproved),\n/* harmony export */   notifyAnticipoPending: () => (/* binding */ notifyAnticipoPending),\n/* harmony export */   notifyAnticipoRejected: () => (/* binding */ notifyAnticipoRejected),\n/* harmony export */   notifyCalculatorReminder: () => (/* binding */ notifyCalculatorReminder),\n/* harmony export */   notifyPaginaConfirmed: () => (/* binding */ notifyPaginaConfirmed),\n/* harmony export */   sendBotNotification: () => (/* binding */ sendBotNotification)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n/* harmony import */ var _aim_botty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./aim-botty */ \"(rsc)/./lib/chat/aim-botty.ts\");\n// Sistema de Notificaciones Automáticas de AIM Botty\n// ==================================================\n\n\nconst supabaseUrl = \"https://mhernfrkvwigxdubiozm.supabase.co\";\nconst supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__.createClient)(supabaseUrl, supabaseKey, {\n    auth: {\n        autoRefreshToken: false,\n        persistSession: false\n    }\n});\n// Enviar notificación automática a un usuario\nasync function sendBotNotification(userId, notificationType, customMessage) {\n    try {\n        // Obtener contexto del usuario\n        const { data: user } = await supabase.from(\"users\").select(\"id, name, email, role\").eq(\"id\", userId).single();\n        if (!user) {\n            console.error(\"Usuario no encontrado para notificaci\\xf3n:\", userId);\n            return false;\n        }\n        // Obtener o crear conversación con el bot\n        let conversationId = await getOrCreateBotConversation(userId);\n        if (!conversationId) {\n            console.error(\"No se pudo crear/obtener conversaci\\xf3n con el bot\");\n            return false;\n        }\n        // Generar mensaje de notificación\n        const userContext = {\n            userId: user.id,\n            role: user.role || \"modelo\",\n            name: user.name || user.email?.split(\"@\")[0] || \"Usuario\",\n            email: user.email || \"\"\n        };\n        const messageContent = customMessage || (0,_aim_botty__WEBPACK_IMPORTED_MODULE_0__.generateNotificationMessage)(notificationType, userContext);\n        // Crear mensaje del bot\n        const { error } = await supabase.from(\"chat_messages\").insert({\n            conversation_id: conversationId,\n            sender_id: _aim_botty__WEBPACK_IMPORTED_MODULE_0__.AIM_BOTTY_ID,\n            content: messageContent,\n            message_type: \"ai_response\"\n        });\n        if (error) {\n            console.error(\"Error enviando notificaci\\xf3n del bot:\", error);\n            return false;\n        }\n        console.log(`✅ Notificación enviada a ${user.name} (${notificationType})`);\n        return true;\n    } catch (error) {\n        console.error(\"Error en sendBotNotification:\", error);\n        return false;\n    }\n}\n// Obtener o crear conversación con el bot\nasync function getOrCreateBotConversation(userId) {\n    try {\n        // Buscar conversación existente\n        const { data: existingConv } = await supabase.from(\"chat_conversations\").select(\"id\").or(`participant_1_id.eq.${userId},participant_2_id.eq.${userId}`).or(`participant_1_id.eq.${_aim_botty__WEBPACK_IMPORTED_MODULE_0__.AIM_BOTTY_ID},participant_2_id.eq.${_aim_botty__WEBPACK_IMPORTED_MODULE_0__.AIM_BOTTY_ID}`).single();\n        if (existingConv) {\n            return existingConv.id;\n        }\n        // Crear nueva conversación\n        const { data: newConv, error } = await supabase.from(\"chat_conversations\").insert({\n            participant_1_id: userId,\n            participant_2_id: _aim_botty__WEBPACK_IMPORTED_MODULE_0__.AIM_BOTTY_ID,\n            conversation_type: \"direct\"\n        }).select(\"id\").single();\n        if (error || !newConv) {\n            console.error(\"Error creando conversaci\\xf3n con el bot:\", error);\n            return null;\n        }\n        return newConv.id;\n    } catch (error) {\n        console.error(\"Error en getOrCreateBotConversation:\", error);\n        return null;\n    }\n}\n// Enviar notificación de anticipo pendiente\nasync function notifyAnticipoPending(userId, anticipoId) {\n    await sendBotNotification(userId, \"anticipo_pendiente\");\n}\n// Enviar notificación de anticipo aprobado\nasync function notifyAnticipoApproved(userId) {\n    await sendBotNotification(userId, \"anticipo_aprobado\");\n}\n// Enviar notificación de anticipo rechazado\nasync function notifyAnticipoRejected(userId) {\n    await sendBotNotification(userId, \"anticipo_rechazado\");\n}\n// Enviar notificación de página confirmada\nasync function notifyPaginaConfirmed(userId) {\n    await sendBotNotification(userId, \"pagina_confirmada\");\n}\n// Enviar recordatorio de ingresar valores\nasync function notifyCalculatorReminder(userId) {\n    await sendBotNotification(userId, \"recordatorio_ingreso\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./lib/chat/bot-notifications.ts\n");

/***/ }),

/***/ "(rsc)/./utils/period-closure-dates.ts":
/*!***************************************!*\
  !*** ./utils/period-closure-dates.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EARLY_FREEZE_PLATFORMS: () => (/* binding */ EARLY_FREEZE_PLATFORMS),\n/* harmony export */   getColombiaDate: () => (/* binding */ getColombiaDate),\n/* harmony export */   getColombiaDateTime: () => (/* binding */ getColombiaDateTime),\n/* harmony export */   getColombiaMidnight: () => (/* binding */ getColombiaMidnight),\n/* harmony export */   getCurrentPeriodType: () => (/* binding */ getCurrentPeriodType),\n/* harmony export */   getEuropeanCentralMidnightInColombia: () => (/* binding */ getEuropeanCentralMidnightInColombia),\n/* harmony export */   isClosureDay: () => (/* binding */ isClosureDay),\n/* harmony export */   isEarlyFreezePlatform: () => (/* binding */ isEarlyFreezePlatform),\n/* harmony export */   isEarlyFreezeTime: () => (/* binding */ isEarlyFreezeTime),\n/* harmony export */   isFullClosureTime: () => (/* binding */ isFullClosureTime)\n/* harmony export */ });\n/**\r\n * 🕐 UTILIDADES DE FECHAS PARA CIERRE DE PERÍODOS\r\n * \r\n * Calcula medianoche Europa Central en hora Colombia y gestiona\r\n * los momentos de congelación y cierre de períodos.\r\n * \r\n * IMPORTANTE: Todo se calcula en timezone Colombia (America/Bogota)\r\n */ /**\r\n * Obtiene la fecha actual en formato YYYY-MM-DD usando Colombia\r\n */ const getColombiaDate = ()=>{\n    return new Date().toLocaleDateString(\"en-CA\", {\n        timeZone: \"America/Bogota\"\n    });\n};\n/**\r\n * Obtiene la fecha y hora actual en formato ISO usando Colombia\r\n */ const getColombiaDateTime = ()=>{\n    return new Date().toLocaleString(\"sv-SE\", {\n        timeZone: \"America/Bogota\"\n    });\n};\n/**\r\n * Calcula la medianoche de Europa Central (Europe/Berlin) en hora Colombia\r\n * @param date - Fecha de referencia (opcional, usa fecha actual si no se proporciona)\r\n * @returns Objeto con fecha/hora en Colombia y timestamp\r\n */ const getEuropeanCentralMidnightInColombia = (date)=>{\n    const now = date || new Date();\n    // Obtener fecha de hoy en Europa Central\n    const europeDateFormatter = new Intl.DateTimeFormat(\"en-CA\", {\n        timeZone: \"Europe/Berlin\",\n        year: \"numeric\",\n        month: \"2-digit\",\n        day: \"2-digit\"\n    });\n    const europeDateStr = europeDateFormatter.format(now); // YYYY-MM-DD\n    // Crear Date object que representa medianoche en Europa Central\n    // Necesitamos crear un string ISO que JavaScript interprete correctamente\n    // Usamos el formato: YYYY-MM-DDTHH:mm:ss+offset\n    // Pero primero necesitamos saber qué hora es medianoche Europa Central en UTC\n    // Método más simple: crear Date con string ISO usando timezone\n    // JavaScript Date no soporta timezone en constructor, así que usamos otro enfoque\n    // Calcular qué hora UTC corresponde a medianoche en Europa Central\n    // Para esto, creamos una fecha \"test\" en medianoche Europa Central\n    const testFormatter = new Intl.DateTimeFormat(\"en-US\", {\n        timeZone: \"Europe/Berlin\",\n        year: \"numeric\",\n        month: \"2-digit\",\n        day: \"2-digit\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        second: \"2-digit\",\n        hour12: false\n    });\n    // Obtener hora actual en Europa Central\n    const parts = testFormatter.formatToParts(now);\n    const europeParts = {};\n    parts.forEach((part)=>{\n        if (part.type !== \"literal\") {\n            europeParts[part.type] = part.value;\n        }\n    });\n    // Crear fecha ISO string para medianoche Europa Central\n    const europeMidnightISO = `${europeParts.year}-${europeParts.month}-${europeParts.day}T00:00:00`;\n    // Ahora necesitamos convertir esto a hora Colombia\n    // Para esto, usamos el hecho de que JavaScript Date trabaja en UTC\n    // Pero podemos usar una fecha \"falsa\" y luego calcular la diferencia\n    // Método más directo: usar la API de tiempo para obtener offset\n    // Crear un Date para medianoche en Europa Central\n    const europeYear = parseInt(europeParts.year);\n    const europeMonth = parseInt(europeParts.month) - 1; // 0-based\n    const europeDay = parseInt(europeParts.day);\n    // Crear Date en UTC que represente medianoche en Europa Central\n    // Necesitamos saber el offset de Europa Central en ese momento\n    const testDateUTC = new Date(Date.UTC(europeYear, europeMonth, europeDay, 0, 0, 0));\n    // Calcular offset de Europa Central en ese momento\n    const europeOffset = getEuropeCentralOffset(testDateUTC); // Horas desde UTC\n    const europeMidnightUTC = new Date(Date.UTC(europeYear, europeMonth, europeDay, -europeOffset, 0, 0));\n    // Colombia es UTC-5, así que restamos 5 horas\n    const colombiaMidnight = new Date(europeMidnightUTC.getTime() - 5 * 3600000);\n    // Formatear resultado\n    const colombiaDate = colombiaMidnight.toLocaleDateString(\"en-CA\", {\n        timeZone: \"America/Bogota\"\n    });\n    const colombiaTime = colombiaMidnight.toLocaleTimeString(\"en-US\", {\n        timeZone: \"America/Bogota\",\n        hour12: false,\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        second: \"2-digit\"\n    });\n    return {\n        colombiaTime: colombiaTime || \"00:00:00\",\n        colombiaDate,\n        colombiaDateTime: colombiaMidnight,\n        europeDate: europeDateStr\n    };\n};\n/**\r\n * Obtiene el offset de Europa Central en horas (considera DST)\r\n * @param date - Fecha de referencia\r\n * @returns Offset en horas (1 para invierno, 2 para verano)\r\n */ function getEuropeCentralOffset(date) {\n    // Obtener la hora UTC y la hora en Europa Central para la misma fecha\n    const utcHour = date.getUTCHours();\n    // Crear formatter para Europa Central\n    const formatter = new Intl.DateTimeFormat(\"en-US\", {\n        timeZone: \"Europe/Berlin\",\n        hour: \"2-digit\",\n        hour12: false\n    });\n    const europeHour = parseInt(formatter.format(date));\n    // Calcular diferencia (considerando que puede cruzar medianoche)\n    let offset = europeHour - utcHour;\n    if (offset > 12) offset -= 24;\n    if (offset < -12) offset += 24;\n    return offset;\n}\n/**\r\n * Obtiene medianoche Colombia (00:00:00)\r\n * @param date - Fecha de referencia (opcional)\r\n * @returns Fecha/hora de medianoche en Colombia\r\n */ const getColombiaMidnight = (date)=>{\n    const now = date || new Date();\n    const colombiaDate = getColombiaDate();\n    const midnight = new Date(`${colombiaDate}T00:00:00`);\n    return {\n        date: colombiaDate,\n        datetime: midnight,\n        time: \"00:00:00\"\n    };\n};\n/**\r\n * Verifica si es momento de congelar plataformas especiales\r\n * (medianoche Europa Central)\r\n * @returns true si es momento de congelación anticipada\r\n */ const isEarlyFreezeTime = ()=>{\n    const now = new Date();\n    const colombiaTime = getColombiaDateTime();\n    const europeMidnight = getEuropeanCentralMidnightInColombia(now);\n    // Comparar hora actual Colombia con hora de medianoche Europa Central en Colombia\n    const [currentHour, currentMinute] = colombiaTime.split(\" \")[1]?.split(\":\") || [\n        \"00\",\n        \"00\"\n    ];\n    const [targetHour, targetMinute] = europeMidnight.colombiaTime.split(\":\");\n    const currentTime = parseInt(currentHour) * 60 + parseInt(currentMinute);\n    const targetTime = parseInt(targetHour) * 60 + parseInt(targetMinute);\n    // Tolerancia de ±5 minutos\n    const tolerance = 5;\n    return Math.abs(currentTime - targetTime) <= tolerance;\n};\n/**\r\n * Verifica si es momento de cierre completo (00:00 Colombia)\r\n * @returns true si es medianoche en Colombia\r\n */ const isFullClosureTime = ()=>{\n    const now = new Date();\n    const colombiaTime = getColombiaDateTime();\n    const [hour, minute, second] = colombiaTime.split(\" \")[1]?.split(\":\") || [\n        \"00\",\n        \"00\",\n        \"00\"\n    ];\n    // Verificar si es medianoche (00:00:00) con tolerancia de ±1 minuto\n    const isMidnight = parseInt(hour) === 0 && parseInt(minute) <= 1;\n    return isMidnight;\n};\n/**\r\n * Lista de 10 plataformas especiales que se congelan a medianoche Europa Central\r\n */ const EARLY_FREEZE_PLATFORMS = [\n    \"superfoon\",\n    \"livecreator\",\n    \"mdh\",\n    \"777\",\n    \"xmodels\",\n    \"big7\",\n    \"mondo\",\n    \"vx\",\n    \"babestation\",\n    \"dirtyfans\"\n];\n/**\r\n * Verifica si una plataforma es especial (se congela anticipadamente)\r\n * @param platformId - ID de la plataforma\r\n * @returns true si es plataforma especial\r\n */ const isEarlyFreezePlatform = (platformId)=>{\n    return EARLY_FREEZE_PLATFORMS.includes(platformId.toLowerCase());\n};\n/**\r\n * Obtiene el período actual basado en el día\r\n * @returns Período: '1-15' o '16-31'\r\n */ const getCurrentPeriodType = ()=>{\n    const colombiaDate = getColombiaDate();\n    const day = parseInt(colombiaDate.split(\"-\")[2]);\n    return day >= 1 && day <= 15 ? \"1-15\" : \"16-31\";\n};\n/**\r\n * Verifica si es día de cierre (día 1 o 16)\r\n * @returns true si es día de cierre\r\n */ const isClosureDay = ()=>{\n    const colombiaDate = getColombiaDate();\n    const day = parseInt(colombiaDate.split(\"-\")[2]);\n    return day === 1 || day === 16;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./utils/period-closure-dates.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/next","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fcalculator%2Fperiod-closure%2Fclose-period%2Froute&page=%2Fapi%2Fcalculator%2Fperiod-closure%2Fclose-period%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fcalculator%2Fperiod-closure%2Fclose-period%2Froute.ts&appDir=C%3A%5CUsers%5Ccamca%5COneDrive%5CDocumentos%5CGitHub%5Ciam-sistema-de-gestion%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CUsers%5Ccamca%5COneDrive%5CDocumentos%5CGitHub%5Ciam-sistema-de-gestion&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();