"use strict";(()=>{var r={};r.id=6694,r.ids=[6694],r.modules={30517:r=>{r.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},13685:r=>{r.exports=require("http")},95687:r=>{r.exports=require("https")},85477:r=>{r.exports=require("punycode")},12781:r=>{r.exports=require("stream")},57310:r=>{r.exports=require("url")},59796:r=>{r.exports=require("zlib")},27950:(r,e,o)=>{o.r(e),o.d(e,{headerHooks:()=>_,originalPathname:()=>P,patchFetch:()=>A,requestAsyncStorage:()=>p,routeModule:()=>d,serverHooks:()=>E,staticGenerationAsyncStorage:()=>g,staticGenerationBailout:()=>f});var s={};o.r(s),o.d(s,{DELETE:()=>l,GET:()=>c,POST:()=>m});var t=o(95419),n=o(69108),i=o(99678),a=o(78070),u=o(72964);async function c(r){try{console.log("\uD83C\uDFE0 [API] Obteniendo rooms...");let{searchParams:e}=new URL(r.url),o=e.get("groupId"),s=(0,u.createClient)("https://mhernfrkvwigxdubiozm.supabase.co",process.env.SUPABASE_SERVICE_ROLE_KEY).from("group_rooms").select(`
        id,
        room_name,
        group_id,
        is_active,
        groups!inner(
          id,
          name
        )
      `);o&&(console.log("\uD83D\uDD0D [API] Filtrando rooms por grupo:",o),s=s.eq("group_id",o));let{data:t,error:n}=await s.order("room_name",{ascending:!0});if(n)return console.error("❌ [API] Error obteniendo rooms:",n),a.Z.json({success:!1,error:"Error obteniendo rooms"},{status:500});return console.log("✅ [API] Rooms obtenidos:",t?.length||0),a.Z.json({success:!0,rooms:t||[]})}catch(r){return console.error("❌ [API] Error general:",r),a.Z.json({success:!1,error:"Error interno"},{status:500})}}async function m(r){try{console.log("\uD83C\uDFE0 [API] Creando room...");let{room_name:e,group_id:o}=await r.json();if(!e||!e.trim())return a.Z.json({success:!1,error:"El nombre del room es requerido"},{status:400});if(!o)return a.Z.json({success:!1,error:"El grupo es requerido"},{status:400});let s=(0,u.createClient)("https://mhernfrkvwigxdubiozm.supabase.co",process.env.SUPABASE_SERVICE_ROLE_KEY),{data:t,error:n}=await s.from("groups").select("id, name").eq("id",o).single();if(n||!t)return a.Z.json({success:!1,error:"El grupo seleccionado no existe"},{status:400});let{data:i,error:c}=await s.from("group_rooms").insert({room_name:e.trim(),group_id:o,is_active:!0}).select(`
        id,
        room_name,
        group_id,
        is_active,
        groups!inner(
          id,
          name
        )
      `).single();if(c){if(console.error("❌ [API] Error creando room:",c),"23505"===c.code)return a.Z.json({success:!1,error:"Ya existe un room con ese nombre en este grupo"},{status:400});return a.Z.json({success:!1,error:"Error creando room"},{status:500})}return console.log("✅ [API] Room creado:",i),a.Z.json({success:!0,room:i})}catch(r){return console.error("❌ [API] Error general:",r),a.Z.json({success:!1,error:"Error interno"},{status:500})}}async function l(r){try{console.log("\uD83D\uDDD1️ [API] Eliminando room...");let{searchParams:e}=new URL(r.url),o=e.get("id");if(!o)return a.Z.json({success:!1,error:"ID del room es requerido"},{status:400});let s=(0,u.createClient)("https://mhernfrkvwigxdubiozm.supabase.co",process.env.SUPABASE_SERVICE_ROLE_KEY),{data:t,error:n}=await s.from("group_rooms").select("id, room_name, group_id").eq("id",o).single();if(n||!t)return a.Z.json({success:!1,error:"El room no existe"},{status:404});let{data:i,error:c}=await s.from("room_assignments").select("id").eq("room_id",o);if(c)return console.error("❌ [API] Error verificando asignaciones:",c),a.Z.json({success:!1,error:"Error verificando asignaciones del room"},{status:500});if(i&&i.length>0)return a.Z.json({success:!1,error:`No se puede eliminar el room "${t.room_name}" porque tiene ${i.length} asignaci\xf3n(es) activa(s). Primero elimine las asignaciones.`},{status:400});let{error:m}=await s.from("group_rooms").delete().eq("id",o);if(m)return console.error("❌ [API] Error eliminando room:",m),a.Z.json({success:!1,error:"Error eliminando room"},{status:500});return console.log("✅ [API] Room eliminado:",t.room_name),a.Z.json({success:!0,message:`Room "${t.room_name}" eliminado correctamente`})}catch(r){return console.error("❌ [API] Error general:",r),a.Z.json({success:!1,error:"Error interno"},{status:500})}}let d=new t.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/groups/rooms/route",pathname:"/api/groups/rooms",filename:"route",bundlePath:"app/api/groups/rooms/route"},resolvedPagePath:"C:\\Users\\camca\\OneDrive\\Documentos\\GitHub\\iam-sistema-de-gestion\\app\\api\\groups\\rooms\\route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:p,staticGenerationAsyncStorage:g,serverHooks:E,headerHooks:_,staticGenerationBailout:f}=d,P="/api/groups/rooms/route";function A(){return(0,i.patchFetch)({serverHooks:E,staticGenerationAsyncStorage:g})}}};var e=require("../../../../webpack-runtime.js");e.C(r);var o=r=>e(e.s=r),s=e.X(0,[1638,6206,2964],()=>o(27950));module.exports=s})();