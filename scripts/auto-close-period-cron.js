/**
 * üîÑ CRON JOB: Cierre Autom√°tico de Per√≠odos de Calculadora
 * 
 * Este script se ejecuta autom√°ticamente los d√≠as 1 y 16 de cada mes
 * a las 00:00 (medianoche) en huso horario de Europa Central.
 * 
 * FUNCIONES:
 * 1. Archivar valores actuales a tabla hist√≥rica
 * 2. Resetear calculadora a ceros
 * 3. Preparar nuevo per√≠odo
 */

const https = require('https');
const { getCalculatorDate, getCurrentCalculatorPeriod } = require('../utils/calculator-dates');

// Configuraci√≥n del endpoint
const API_URL = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000';
const ENDPOINT = `${API_URL}/api/calculator/auto-close-period`;

/**
 * Ejecutar cierre autom√°tico de per√≠odo
 */
async function executeAutoClose() {
  try {
    console.log('üîÑ [CRON] Iniciando cierre autom√°tico de per√≠odo...');
    console.log('üîÑ [CRON] Fecha actual (Europa Central):', getCalculatorDate());
    console.log('üîÑ [CRON] Per√≠odo:', getCurrentCalculatorPeriod().description);
    
    // Verificar si es d√≠a de corte (1 o 16)
    const today = new Date();
    const day = today.getDate();
    
    if (day !== 1 && day !== 16) {
      console.log('‚è≠Ô∏è [CRON] No es d√≠a de corte (1 o 16), saltando ejecuci√≥n');
      return;
    }
    
    console.log('‚úÖ [CRON] Es d√≠a de corte, ejecutando cierre autom√°tico...');
    
    // Llamar al endpoint de cierre autom√°tico
    const response = await fetch(ENDPOINT, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.CRON_SECRET || 'cron-secret'}` // Seguridad b√°sica
      }
    });
    
    const result = await response.json();
    
    if (result.success) {
      console.log('‚úÖ [CRON] Cierre autom√°tico completado exitosamente');
      console.log('üìä [CRON] Resultados:', result.results);
      console.log('üìà [CRON] Resumen:', result.summary);
    } else {
      console.error('‚ùå [CRON] Error en cierre autom√°tico:', result.error);
    }
    
  } catch (error) {
    console.error('‚ùå [CRON] Error ejecutando cierre autom√°tico:', error);
  }
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  executeAutoClose();
}

module.exports = { executeAutoClose };
